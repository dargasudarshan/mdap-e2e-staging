#!/bin/bash
set -x

pod() {
apt-get install sshpass

echo "Checking for the number of nodes in ready state*******************************"
#ready_nodes=$(ssh -i private.pem -o StrictHostKeyChecking=no k8s@106.51.78.18 'kubectl get nodes | grep Ready | wc -l')
ready_nodes=$(sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip kubectl get nodes | grep Ready | wc -l)

if [ "$ready_nodes" -eq 4 ]; then
echo "Number of nodes in ready state is $ready_nodes"
else
echo "All nodes are not ready"
exit;
fi


sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip 'ssh root@10.12.22.10 oc adm policy add-scc-to-user anyuid system:serviceaccount:app-percona-ns:default'
##clone e2e-openshift-repo
echo "cloneing e2e-openshift repo*************"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip 'git clone https://$user:$pass@github.com/mayadata-io/mdap-e2e-staging.git'

sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip 'cd mdap-e2e-staging && git checkout app_deploy && bash scripts/apps/percona/percona-app-deploy-cstor node'

}

node() {

######################
##   ENVIRONMENT    ##
######################

present_dir=$(pwd)
echo $present_dir
cd $present_dir

echo "Generating test name***************************"
test_name=$(bash utils/generate_test_name testcase=percona-deployment metadata="")
echo $test_name


## Clone the litmus repo, navigate to litmus root 

git clone https://github.com/openebs/litmus.git
cd litmus


############################
## LITMUS PRECONDITIONING ##
############################
run_test=apps/percona/deployers/run_litmus_test.yml

sed -i -e 's/app: percona-deployment/app: percona-deployment-cstor/g' \
-e 's/value: openebs-standard/value: openebs-cstor-sparse/g' \
-e 's/value: app-percona-ns/value: percona-cstor/g' $run_test

echo "updated yaml"
cat apps/percona/deployers/run_litmus_test.yml

#################
## RUNNER MAIN ##
#################

echo "Running litmus test for percona deploy.."

bash ../scripts/utils/litmus_job_runner label='name:percona' job=$run_test

echo "Dumping state of cluster post job run"; echo ""
bash ../scripts/utils/dump_cluster_state;


#################
## GET RESULT  ##
#################

## Check the test status & result from the litmus result custom resource
bash ../scripts/utils/get_litmus_result ${test_name}

}

if [ "$1" == "node" ];then
  node 
else
  pod
fi

